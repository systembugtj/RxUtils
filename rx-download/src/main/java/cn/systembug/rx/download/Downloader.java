package cn.systembug.rx.download;

import android.util.Log;

import java.io.File;
import java.io.IOException;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;
import rx.Observable;
import rx.Subscriber;

/**
 * Created by systembug on 4/12/16.
 */
public class Downloader

    public interface OnDownloadChangeListener {
        void startDownload(String url);
        void downloadProgress(int step);
        void downloadComplete();
    }

    private OnDownloadChangeListener mListener;
    private String mUrl = "";
    private OkHttpClient mOkHttpClient;

    public Downloader client(OkHttpClient client) {
        mOkHttpClient = client;
        return this;
    }

    public Downloader listener (OnDownloadChangeListener listener) {
        mListener = listener;
        return this;
    }

    public Downloader url(String url) {
        mUrl = url;
        return this;
    }


    public OkHttpClient getOkHttpClient() {
        if (mOkHttpClient == null) {
            mOkHttpClient = new OkHttpClient();
        }
        return mOkHttpClient;
    }

    public Observable<Response> download() {
        if ()
        return Observable.create(new Observable.OnSubscribe<Response>() {
            @Override
            public void call(Subscriber<? super Response> subscriber) {
                    if (mListener != null) {
                        mListener.startDownload(mUrl);
                    }
                    mOkHttpClient.newCall(new Request.Builder().url(mUrl).build()).enqueue(new Callback() {
                        @Override
                        public void onFailure(Call call, IOException e) {
                            subscriber.onError(e);
                        }

                        @Override
                        public void onResponse(Call call, final Response response) throws IOException {
                            if (!response.isSuccessful()) {
                                subscriber.onError(new IOException("Unexpected code " + response));
                            } else {
                                subscriber.onNext(response);
                                subscriber.onCompleted();
                            }
                        }
                    });
                    }
                })
                .map(response -> {
                    if (response.isSuccessful()) {
                        BufferedSink sink = null;
                        try {
                            String path = Utils.getExternalSavePath(this) + fileName + ".jpg";
                            File file = new File(path);

                            sink = Okio.buffer(Okio.sink(file));

                            int DOWNLOAD_CHUNK_SIZE = 2048;
                            long bytesRead = 0;
                            ResponseBody body = response.body();
                            long contentLength = body.contentLength();
                            BufferedSource source = body.source();

                            mProgressEvent.send(new AsyncEvent(EventType.SYNC_DOWNLOAD, 2));
                            int previous = 0;
                            while (source.read(sink.buffer(), DOWNLOAD_CHUNK_SIZE) != -1) {
                                bytesRead += DOWNLOAD_CHUNK_SIZE;
                                int progress = (int) ((bytesRead * 100) / contentLength);
                                // slow down.
                                if (progress - previous > 12) {
                                    mProgressEvent.send(new AsyncEvent(EventType.SYNC_DOWNLOAD, progress));
                                    previous = progress;
                                }
                            }

                            sink.writeAll(source);
                            sink.close();
                            Log.d(Constant.TAG, "downloaded file: " + path);
                            return path;
                        } catch (IOException ex) {
                            try{
                                if(sink != null) {
                                    sink.close();
                                }
                            }catch (Exception ignored) {
                                // ignore exceptions generated by close()
                            }
                            Log.e(Constant.TAG, "IO error: ", ex);
                        }
                        mProgressEvent.send(new AsyncEvent(EventType.SYNC_DOWNLOAD, 0));
                    }
                    return ""; // not downloaded, return empty string to ignore it.

                });
    }
}

